file_requirements:
  user: |
    - Focus analysis on files that are reachable from external input, can be triggered through startup or user interaction, and may lead to security-relevant behavior. Prioritize files that meet **any** of the following conditions:

    - Executable binaries (ELF or scripts):
      * Accept external input (parameters, environment variables, file content, network data)
      * Registered in system startup scripts (e.g., rcS, init.d, inittab)
      * Triggered by web forms, CGI, or JavaScript requests
      * Perform critical operations such as command execution, file manipulation, or network access
      * Contain dangerous function calls (e.g., system, strcpy, sprintf, popen)

    - Network service components:
      * Contain socket, bind, listen functionality
      * Bind to external interfaces (eth0, br0, 0.0.0.0) or open ports
      * Examples include: telnetd, pppd, udhcpd, smac2_tftpd, UDPserver, miniigd
      * Evaluate whether these accept unauthenticated input or expose default services

    - Web-related files:
      * Web server binaries (boa, httpd, mini_httpd, etc.)
      * Executable CGI or shell scripts, often in /bin, /cgi-bin, /www
      * HTML or JavaScript files containing form actions, input fields, or dynamic requests
      * Web configuration files (e.g., boa.conf) defining CGI paths or backend script permissions

    - Startup and configuration files:
      * Startup scripts (e.g., /etc/init.d/*, rcS, inittab) that invoke services or scripts
      * Config files specifying interface bindings, open ports, authentication behavior, or firmware update mechanisms
      * Dynamic hooks such as scheduled tasks or auto-update scripts

    - Sensitive data files (analyze **only if externally accessible**):
      * Contain credentials, certificates, API tokens, encryption keys (e.g., passwd, shadow, smbpasswd, *.pem)
      * Prioritize if data is exposed to web interfaces, accessible ports, or misconfigured services

    - Payload carriers (optional targets):
      * Files not directly exposed, but used as part of command execution or processing chains
      * Analyze only when referenced in input-driven logic (e.g., cat, cp used within input-handling scripts)

    - Exclusion scope (deprioritized or skipped):
      * Standalone system utilities (e.g., cp, mv, echo, cat) unless directly used in input-controlled operations
      * Static libraries or unused resources with no reachable execution path

directory_requirements:
  user: |
    **Key Analysis Targets**
    1. Executable Locations
      - bin/
      - sbin/
      - usr/bin/
      - usr/sbin/
      - cgi-bin/
      - Focus on ELF binaries and scripts that:
        * Are referenced in startup scripts
        * Are invoked via CGI or web interfaces
        * Contain known dangerous functions or execution calls

    2. Sensitive Files
      - etc/
        * Startup flow control (init.d, rcS, inittab)
        * Authentication data (passwd, shadow)
        * Network interface & port binding configs
      - lib/
        * Custom or third-party libraries (.so) used by services
        * Linked libraries in user-facing binaries

    3. Web Interfaces & Upgrade Logic
      - www/
      - web/
      - upgrade/
      - Look for:
        * Firmware upgrade paths
        * Web-to-backend script triggers
        * Frontend-to-CGI execution chains

    **Priority Levels**
    - Priority 1 (Critical)
      - Components, scripts, or binaries directly accessible, triggerable, or network-bound
    - Priority 2 (High)
      - Configs, credentials, or libraries influencing exposed behavior or startup
    - Priority 3 (Medium)
      - Web UI, display pages, logs, or upload-related resources

file_findings_requirements:
  user: |
    **Analysis Workflow**
    0. Attack Surface Discovery
      - Identify user-controlled inputs (web forms, JS, socket recv, file read, environment variables)
      - Verify component runtime state (via startup scripts, daemon presence, open ports)
      - Trace input → sink path (e.g., system(), strcpy(), popen())

    1. Information Discovery
      - Detect credentials, hardcoded secrets, API tokens, encryption keys, version info
      - Extract IPs, URLs, interface names, debug/test paths

    2. Security Review
      - Check service exposure (bound interfaces, open ports)
      - Verify authentication, input control, and encryption usage
      - Analyze configuration for weak/default options

    3. Code Analysis
      - Identify dangerous calls (system, strcpy, sprintf, popen, open, eval)
      - Check use of unvalidated or user-controlled input in these functions
      - Perform control flow and taint tracking to assess input reachability

    4. Vulnerability Search
      - Match known CVEs using version identifiers and component metadata
      - Include only those with confirmed execution paths and runtime presence

    - Data Flow Reachability
      - Confirm whether user input reaches dangerous operations without sanitization
      - Trace across multiple layers (e.g., web input → script → binary → command)

    **Severity Rating**
    - Level 5 (Critical):
      - Reachable input → No validation → Dangerous function → Executable path
    - Level 4 (High):
      - Controllable input + Sensitive exposure or weak protection
    - Level 3 (Medium):
      - Known flaw exists but lacks reachable or controllable path
    - Level 0–2 (Low):
      - Informational findings, debug data, or misconfigurations with no clear exploit vector

security_report_template:
  user: |
    - [Location] Relative file path or directory
    - [Type] Component / Credential / Configuration / Script / Other
    - [Version Info] Software/library version, CVE references if applicable
    - [Description] Clear explanation of the identified issue or behavior
    - [Details] Technical specifics (e.g., input vector, vulnerable function, script name)
    - [Impact] Expected security consequences (e.g., RCE, DoS, credential leakage)
    - [Exploitability] Confirmed / Theoretical / None
    - [Risk Level] Critical / High / Medium / Low

summary_template:
  user: |
    Firmware Summary:

    [Basic Info]
    - Name / Version: [Firmware name and version]
    - Device / Architecture: [Model, SoC or CPU arch]
    - Key Metadata: [Build date, kernel version, release notes, etc.]

    [Coverage]
    - Analyzed Directories: [List of scanned root-level folders]
    - High-Value Files: [Core files assessed for vulnerability]

    [Findings]
    - Critical Issues: [Location] – [Root cause and impact]
    - Major Issues: [Location] – [Root cause and impact]
    - Other Issues: [Location] – [Root cause and impact]

    [Attack Surface]
    - Confirmed Triggerable Paths: [List of scripts/binaries triggered from web or startup]
    - Bound Ports or Services: [List of exposed services and interfaces]
    - Exploitable Chains: [Input → Component → Sink → Impact flow description]
