file_requirements:
  user: |
    - Core System Components
      * Basic Tools
        - Contains basic command tools
        - If supporting parameters or called by scripts, mark as "potential input point"

      * System Libraries
        - Core/shared/dynamic link libraries
        - Contains exported functions or logic checks, mark as "callable components"

    - Service Components
      * Network Services
        - Has socket, bind, listen functionality, or binds to external interfaces (eth0, 0.0.0.0)
        - Includes listening components like telnetd, pppd, dhcpd, UDPserver

      * System Services
        - Background services started by init scripts or auto-run
        - Appears in rcS, init.d, inittab

      * Web Services
        - Web servers (boa, lighttpd) and related CGI, backend processing scripts
        - Executable scripts triggered by web pages (form, JS requests)

    - Configuration Files
      * Web Components
        - HTML pages, JS files, CGI scripts
        - Contains user input, action submissions or dynamic loading behavior

      * Security Files
        - Files containing keys, passwords, certificates, tokens
        - Risk of plaintext storage, lack of permission controls

      * System Configs
        - Startup scripts, network configs, service configuration files
        - May contain startup items, listening ports, authentication methods and other security parameters

directory_requirements:
  user: |
    **Key Analysis Targets**
    1. Executable Locations
      - bin/
      - sbin/
      - usr/bin/
      - usr/sbin/
      - cgi-bin/
      - Contains triggerable ELF, scripts, CGI
      - Check for dangerous function calls or system command execution

    2. Sensitive Files
      - etc/
      - Contains startup process, authentication info, network bindings
      - Check for external interface bindings, plaintext passwords, config weaknesses

      - lib/
      - Contains custom or third-party .so libraries that may have vulnerable logic

    3. Web Interfaces & Upgrade Logic
      - www/
      - web/
      - upgrade/
      - Check for config uploads, firmware upgrades, web backend execution scripts

    **Priority Levels**
    - Priority 1 (Critical)
      - Components or scripts that can be directly accessed, triggered or listened from external
    - Priority 2 (High)
      - Config files, key files, library files affecting system behavior or authentication
    - Priority 3 (Medium)
      - Auxiliary scripts, display pages, logs, upload files etc.

file_findings_requirements:
  user: |
    **Analysis Workflow**
    0. Attack Surface Discovery
      - Check for user input paths (web forms, JS, network connections, file parameters)
      - Check if component is running (started by init script, listening ports, daemon)
      - Check for input → dangerous function paths (system, strcpy etc.)

    1. Information Discovery
      - Detect passwords, keys, versions, interfaces, tokens and other sensitive info

    2. Security Review
      - Check if services/ports are exposed
      - Check if configs allow unauthorized access or use weak encryption
      - Check if startup items load high-risk components

    3. Code Analysis
      - Find command execution functions, memory operation functions, input reading functions
      - Check if unvalidated input is used for dangerous operations
      - Track data flow to see if user input can affect system calls

    4. Vulnerability Search
      - Match CVEs (based on library/binary versions)
      - Only list vulnerabilities with clear paths & loaded components

    **Severity Rating**
    - Level 5 (Critical):
      - Input source → No validation → Dangerous function → Can execute
    - Level 4 (High):
      - Controllable input + Data leakage + Weak configuration
    - Level 3 (Medium):
      - Vulnerability exists but path unclear/uncontrollable
    - Level 0-2 (Low):
      - No exploit path, only information leakage or configuration warnings

security_report_template:
  user: |
    - [Location] Relative path
    - [Type] Component/Credential/Configuration/Other
    - [Version Info] Version/release information and CVE number if applicable
    - [Description] Detailed issue description
    - [Details] Technical details/Sensitive information
    - [Impact] Potential security impact
    - [Risk Level] Critical/High/Medium/Low

summary_template:
  user: |
    Firmware Summary:
    [Basic Info]
    - Name/Version: [Firmware name and version]
    - Device/Type/Arch: [Device model and architecture]
    - Key Info: [Other important information, such as release date, kernel version, etc.]

    [Coverage] 
    - Key Dirs: [Key directories analyzed]
    - Key Files: [Key files analyzed]

    [Main Issues]
    - Critical Issues: [Location]: Root cause of the issue (Specific technical details like vulnerable code/misconfiguration/insecure functions etc.)
    - Major Issues: [Location]: Root cause of the issue (Specific technical details like vulnerable code/misconfiguration/insecure functions etc.)
    - Other Issues: [Location]: Root cause of the issue (Specific technical details like vulnerable code/misconfiguration/insecure functions etc.)

    [Attack Surface]
    - Attack chains or exploitable path: A complete description of the attack chain or specify the exact exploitation method.
